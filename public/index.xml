<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GAURAV SATAV on GAURAV SATAV</title>
    <link>/</link>
    <description>Recent content in GAURAV SATAV on GAURAV SATAV</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 GAURAV SATAV</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0530</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Connectivity Representation using Flexdashboard library</title>
      <link>/post/flexdashboard_uc1/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/flexdashboard_uc1/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#welcome&#34;&gt;WELCOME !&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#read-data&#34;&gt;READ DATA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-main-dashboard&#34;&gt;CREATE MAIN DASHBOARD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#account-summary&#34;&gt;ACCOUNT SUMMARY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#failed-servers-of-current-week&#34;&gt;FAILED SERVERS OF CURRENT WEEK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#current-weeks-status-of-all-servers&#34;&gt;CURRENT WEEKS STATUS OF ALL SERVERS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;welcome&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;WELCOME !&lt;/h2&gt;
&lt;p&gt;This is my first swing at using the &lt;code&gt;flexdashboard&lt;/code&gt; package in R to create a dashboard. The dashboard show us a &lt;code&gt;storyboard&lt;/code&gt; templet and uses elements from the &lt;code&gt;highcharter&lt;/code&gt; package to create the various plots along with the packages &lt;code&gt;kable&lt;/code&gt; and &lt;code&gt;kableExtra&lt;/code&gt; to format the tables.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The dashboard itself can be viewed by clicking the link &lt;a href=&#34;https://gauravsatav.github.io/NetworkDashboard/&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The github repository which includes the datafiles (along with the code) can be found &lt;a href=&#34;https://github.com/gauravsatav/NetworkDashboard&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll start off by first including the required library&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(flexdashboard)
library(dplyr)
library(ggplot2)
library(highcharter)
library(lubridate)
library(knitr)
library(kableExtra)
library(reshape2)
library(RCurl)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;read-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;READ DATA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Read Current Connectivity Status Data into the “ConnectivityData” dataframe and convert the “Date” column into a date object in R.&lt;/li&gt;
&lt;li&gt;In our case the Connectivity data for different clients is situated in the &lt;code&gt;./Data/November/47/&lt;/code&gt; directory. Different Clients have different datafiles and the &lt;code&gt;47&lt;/code&gt; here represents the 47th Week of the year.&lt;/li&gt;
&lt;li&gt;There is also another dictory which contains the connectivity data for all the previous weeks (for all files) into a single file called &lt;code&gt;AllData.csv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filename &amp;lt;- &amp;quot;../Data/November/47/client1.csv&amp;quot;
path &amp;lt;- dirname(filename)
files &amp;lt;- list.files(paste(path,&amp;quot;/&amp;quot;,sep = &amp;quot;&amp;quot;))
files &amp;lt;- paste(path,files,sep = &amp;quot;/&amp;quot;)
ConnectivityData &amp;lt;- lapply(files,read.csv,header=TRUE)
ConnectivityData &amp;lt;- do.call(rbind,ConnectivityData)
ConnectivityData$Date &amp;lt;- mdy_hms(ConnectivityData$Date)
ConnectivityData$Date &amp;lt;- date(ConnectivityData$Date))

# =====Read the past Connectivity Status Data and perform the same actions, Also bind the current weeks data to it.=====
AllData &amp;lt;- read.csv(&amp;quot;../Data/All/All.csv&amp;quot;)
AllData &amp;lt;- AllData[,2:length(colnames(AllData))]
AllData$Date &amp;lt;- date(AllData$Date)

AllData &amp;lt;- rbind(AllData,ConnectivityData)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# =====Get List of Servers Currently Failing.=====
      CurrentFailedServerList &amp;lt;- as.character(ConnectivityData[grep(&amp;quot;fail&amp;quot;,as.character(ConnectivityData$Sudo),ignore.case = TRUE),&amp;quot;Affected_Host&amp;quot;])

# =====Extract Week for the Data.=====
      AllData$Week &amp;lt;- week(AllData$Date)

# =====Adding the &amp;quot;Account&amp;quot; Variable to the variable FailedServerAnalysis.Just Excluding Jumpboxes and Node2s from the Analysis as they Skew the accounts to which they belong by changinig the &amp;quot;Account&amp;quot; for them in the Current Weeks Data as &amp;quot;Node1 or Node2&amp;quot; and in variable FailedServerDetails &amp;quot;Type&amp;quot; to &amp;quot;Node1 or Node2&amp;quot;=====
    # Define the Special Servers.  
      SpecialServers &amp;lt;- data.frame(ServerIP = c(&amp;quot;127.0.0.1&amp;quot;,&amp;quot;127.18.125.25&amp;quot;,&amp;quot;111.24.8.64&amp;quot;,&amp;quot;111.24.8.63&amp;quot;,&amp;quot;111.12.1.121&amp;quot;,&amp;quot;111.12.2.12&amp;quot;),Type = c(&amp;quot;Node1&amp;quot;,&amp;quot;Node1&amp;quot;,&amp;quot;Node2&amp;quot;,&amp;quot;Node2&amp;quot;,&amp;quot;Other&amp;quot;,&amp;quot;Other&amp;quot;),stringsAsFactors = FALSE)
        
        ConnectivityData$Account&amp;lt;-as.character(ConnectivityData$Account)
        AllData$Account&amp;lt;-as.character(AllData$Account)
        
        AllData[AllData$Affected_Host %in% SpecialServers$ServerIP,&amp;quot;Account&amp;quot;] &amp;lt;- &amp;quot;Node1 or Node2&amp;quot;
        ConnectivityData[ConnectivityData$Affected_Host %in% SpecialServers$ServerIP,&amp;quot;Account&amp;quot;] &amp;lt;- &amp;quot;Node1 or Node2&amp;quot;
        
        ConnectivityData$Account&amp;lt;-as.factor(ConnectivityData$Account)
        AllData$Account&amp;lt;-as.factor(AllData$Account)
        
        ConnectivityData &amp;lt;- ConnectivityData %&amp;gt;% filter(Account!=&amp;quot;Node1 or Node2&amp;quot;)
        AllData &amp;lt;- AllData %&amp;gt;% filter(Account!=&amp;quot;Node1 or Node2&amp;quot;)

# =====Create a DataFrame to Analyse Faliures for all Week (basically to Analyse the Complete Servers). Find the Failed Servers in the AllData and create a new column &amp;#39;Week&amp;#39; which contains the weeks seperated by &amp;quot;,&amp;quot; on which the particular server had failed.=====
      FailedServerDetails &amp;lt;- data.frame(as.matrix(aggregate(Week~Affected_Host,data = AllData[AllData$Sudo==&amp;#39;Failed&amp;#39;,],FUN=function(myweek){paste(myweek,collapse = &amp;quot;,&amp;quot;)})),stringsAsFactors = FALSE)

        FailedServerDetails$Type &amp;lt;- &amp;quot;Endpoints&amp;quot;
        FailedServerDetails[FailedServerDetails$Affected_Host %in% SpecialServers$ServerIP,&amp;quot;Type&amp;quot;] &amp;lt;- &amp;quot;Node1 or Node2&amp;quot;
        FailedServerDetails[FailedServerDetails$Affected_Host %in% SpecialServers$ServerIP,&amp;quot;Type&amp;quot;] &amp;lt;- &amp;quot;Node1 or Node2&amp;quot;

        AllData$Affected_Host &amp;lt;- as.character(AllData$Affected_Host)
        i &amp;lt;- 1
        for(server in FailedServerDetails$Affected_Host){
        if(server %in% SpecialServers$ServerIP){
          FailedServerDetails$Account[i] &amp;lt;- &amp;quot;Node1 or Node2&amp;quot;
          i &amp;lt;- i+1
        }  
          else {
        FailedServerDetails$Account[i] &amp;lt;- as.character(unique(AllData[grep(server,AllData$Affected_Host),&amp;quot;Account&amp;quot;]))
        i&amp;lt;-i+1
        }
        }
        AllData$Affected_Host &amp;lt;- as.factor(AllData$Affected_Host)



# =====Set Current Week and the Starting Week from which the Analysis will be starting. Also Setting the defalut streak for failed servers as 1=====
      CurrentWeek &amp;lt;- week(ConnectivityData$Date[1])
      StartingWeek &amp;lt;-week(AllData$Date[1])
      FailedServerDetails$Streak &amp;lt;- 1
      TempWeek &amp;lt;- CurrentWeek


# =====Create a df &amp;quot;StreakServers&amp;quot; which will help in analysis of server&amp;#39;s streak information by parsing the &amp;quot;Week&amp;quot; column of the FailedServerDetail and adding 1 to the default Streak of 1 to the failed Server.=====
      StreakServers &amp;lt;- FailedServerDetails
      while(TempWeek &amp;gt; StartingWeek){
        StreakServers &amp;lt;- StreakServers[grep(as.character(TempWeek-1),StreakServers$Week),]
        StreakServers$Streak &amp;lt;- StreakServers$Streak+1
        FailedServerDetails[FailedServerDetails$Affected_Host %in% StreakServers$Affected_Host,&amp;quot;Streak&amp;quot;] &amp;lt;-FailedServerDetails[FailedServerDetails$Affected_Host %in% StreakServers$Affected_Host,&amp;quot;Streak&amp;quot;]+1
        TempWeek &amp;lt;- TempWeek - 1
      }
      FailedServerDetails[grep(CurrentWeek,FailedServerDetails$Week,invert = TRUE),&amp;quot;Streak&amp;quot;] &amp;lt;- 0


# =====Finding the total times a server has Failed.=====
      FailedServerDetails$Total &amp;lt;- 1
      for(i in 1:length(FailedServerDetails$Affected_Host)){
        FailedServerDetails$Total[i] &amp;lt;- length(strsplit(FailedServerDetails$Week[i],split=&amp;quot;,&amp;quot;)[[1]])
      }
      FailedServerDetails &amp;lt;- FailedServerDetails[order(-FailedServerDetails$Streak),]


# =====Extracting a df from the &amp;quot;FailedServerDetails&amp;quot; containing details only of Servers which have failed for the current week.=====
      CurrentWeekFailedServerDetails &amp;lt;- FailedServerDetails %&amp;gt;% filter(Affected_Host %in% CurrentFailedServerList)
      CurrentWeekFailedServerDetails &amp;lt;- CurrentWeekFailedServerDetails[order(-CurrentWeekFailedServerDetails$Total),]
      CurrentWeekFailedServerDetails &amp;lt;- CurrentWeekFailedServerDetails[order(-CurrentWeekFailedServerDetails$Streak),]
      
# ====Finding the Point of Faliure.=====
      CurrentWeekFailedServerDetails$PointOfFaliure &amp;lt;- &amp;quot;&amp;quot;
      i&amp;lt;-1
      for(server in CurrentWeekFailedServerDetails$Affected_Host){
        if(ConnectivityData[grep(server,ConnectivityData$Affected_Host),&amp;quot;Sudo&amp;quot;]==&amp;quot;Failed&amp;quot;){
          CurrentWeekFailedServerDetails$PointOfFaliure[i] &amp;lt;- &amp;quot;Sudo&amp;quot;
        }
        if(ConnectivityData[grep(server,ConnectivityData$Affected_Host),&amp;quot;Authentication&amp;quot;]==&amp;quot;Failed&amp;quot;){
          CurrentWeekFailedServerDetails$PointOfFaliure[i] &amp;lt;- &amp;quot;Authentication&amp;quot;
        }
        if(ConnectivityData[grep(server,ConnectivityData$Affected_Host),&amp;quot;SSH_to_endpoint&amp;quot;]==&amp;quot;Failed&amp;quot;){
          CurrentWeekFailedServerDetails$PointOfFaliure[i] &amp;lt;- &amp;quot;SSH&amp;quot;
        }
        if(ConnectivityData[grep(server,ConnectivityData$Affected_Host),&amp;quot;Port_Check_Status&amp;quot;]==&amp;quot;Failed&amp;quot;){
          CurrentWeekFailedServerDetails$PointOfFaliure[i] &amp;lt;- &amp;quot;PortCheck&amp;quot;
        }
        
        if(ConnectivityData[grep(server,ConnectivityData$Affected_Host),&amp;quot;Node1_Status&amp;quot;]==&amp;quot;Failed&amp;quot;){
          CurrentWeekFailedServerDetails$PointOfFaliure[i] &amp;lt;- &amp;quot;Node1&amp;quot;
        }
        i&amp;lt;-i+1
      }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-main-dashboard&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;CREATE MAIN DASHBOARD&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# ===== Count the number of servers which have failed. Also Create a new column which says how many servers are on a streak since last week.=====
      ConnectivityData &amp;lt;- mutate(ConnectivityData,Status = ifelse(Sudo==&amp;quot;Success&amp;quot;,1,0))
      ConnectivityData &amp;lt;- mutate(ConnectivityData,CheckStatus=ifelse(Sudo==&amp;quot;Success&amp;quot;,0,1))
      ConnectivityData$Streak &amp;lt;- 0
      ServersOnStreak &amp;lt;- CurrentWeekFailedServerDetails %&amp;gt;% filter(Streak &amp;gt; 1) %&amp;gt;% select(Affected_Host)
      ConnectivityData &amp;lt;- ConnectivityData %&amp;gt;% mutate(Streak = ifelse(Affected_Host %in% ServersOnStreak$Affected_Host,1,0))


# ===== Summarise the &amp;quot;ConnectivityData&amp;quot; df.=====
      MainDashboard &amp;lt;- ConnectivityData %&amp;gt;% group_by(Account) %&amp;gt;% summarise(Total = length(Affected_Host),Success = sum(Status),Failed = sum(CheckStatus),On.A.Streak = sum(Streak))


# ===== Create the Graph =====      
      melt(MainDashboard,&amp;quot;Account&amp;quot;) %&amp;gt;% hchart(&amp;quot;column&amp;quot;,hcaes(x=&amp;quot;Account&amp;quot;,y=&amp;quot;value&amp;quot;,group=&amp;quot;variable&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;account-summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ACCOUNT SUMMARY&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;MainDashboard %&amp;gt;% kable(&amp;quot;html&amp;quot;,escape=F) %&amp;gt;% kable_styling(&amp;quot;hover&amp;quot;)%&amp;gt;%scroll_box(height=&amp;quot;500px&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;failed-servers-of-current-week&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;FAILED SERVERS OF CURRENT WEEK&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# ===== Dashboard for Details on Current Weeks Falilures =====
      CurrentWeekFailedServerDetails %&amp;gt;% mutate(Total = cell_spec(Total,&amp;quot;html&amp;quot;,color=ifelse(Total &amp;gt; 1,&amp;quot;red&amp;quot;,&amp;quot;black&amp;quot;)))%&amp;gt;% kable(&amp;quot;html&amp;quot;, escape = F) %&amp;gt;% kable_styling(&amp;quot;hover&amp;quot;, full_width = F)%&amp;gt;%scroll_box(height=&amp;quot;500px&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;current-weeks-status-of-all-servers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;CURRENT WEEKS STATUS OF ALL SERVERS&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# ===== Dashboard displaying details for all connectivity status for this week Successful as well as Failed.=====
      ConnectivityData%&amp;gt;%select(-c(Status,CheckStatus)) %&amp;gt;% kable(&amp;quot;html&amp;quot;,escape = F) %&amp;gt;% kable_styling(&amp;quot;hover&amp;quot;, full_width = F)%&amp;gt;%scroll_box(height=&amp;quot;500px&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Deep Learning</title>
      <link>/project/deep-learning/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/deep-learning/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>/project/example-external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/example-external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Person Re-Identification System For Mobile Devices</title>
      <link>/publication/person-re-identification/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/publication/person-re-identification/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/post/2015-07-23-r-rmarkdown/</guid>
      <description>&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mobile visual clothing search</title>
      <link>/publication/clothing-search/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>/publication/clothing-search/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
